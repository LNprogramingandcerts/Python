class Song:

    """Class to request a song
    
    Attributes:
        title(str): The title of the song
        artist (Artist): An artist object representing teh songs creator.
        duration (int): The duration of the song in seconds. May be zero
        """
    def __init__(self, title,artist, duration=0):
        Song.__init__.__doc__=  """Song init method
        Args:
            title (str): Initailises the 'tilte' attribute
            artist (Artist): At Artist object representing the song's creator.
            duration (Optional (int): INital value for the duration attribute
            Will default to zero if not specified."""

        self.title = title
        self.artist = artist
        self.duration = duration

# help(Song.__init__)
print(Song.__doc__)
print(Song.__init__.__doc__)

class Album:
    """ Class to represent an Album, using it's track list
    Attributes:
        (str): The name of the album.
        year(int): The year was album was released.
        artist: (Artist): The artist responsible for the album.
            If no specifed, the artist will default to an artist with the name " Various Artisits".
            tracks (List(Song)): A list of the songs on the album.

    Methods:
        addSOng; USed to add a new song to the album's track list.
    """

    def __init__(self, name, year, artist=None):
        self.name = name
        self.year = year
        if artist is None:
            self.artist = Artist("Various Artist")
        else:
            self.artist = artist

        self.tracks = []

    def add_song(self, song, position=None):

        """Adds a song to the track list
        Args:
        song(Song): A song to add.
        positon (Optional[init]): If specified, the song will be added to that position
        in the track list - inserting it between others songs if necessary.

        """
        if position is None:
            self.tracks.append(song)
        else:
            self.tracks.insert(position,song)

class Artist:
    if __name__ == '__main__':
        if """" Basic class to store artist details.
        
        Attributes:
            neme(str): The name of the artist:
            albums(Lsist(Album]): A list of the ablums by this artist
            The list Incluesd only those albums in this collection, it is 
            not an exhaustive list of the artist;s pubnlished ablums.
            Methods:
            add_alnum: Use toadd a new ablum to the artist;s ablums list 
        """

    def __init__(self, name):
        self.name = name
        self.albums = []

    def add_album(self, album):
        """ Add a new album to the list.
        Args:
         album (Album): Album object to add to the list.
            If the album is already present, it will not added again(although this is yet to implemented).
        """
        self.albums.appedn(album)

def load_data():
    new_artist = None
    new_album = None
    artist_list = []

    with open("albums.txt", "r") as albums:
        for line in albums:
            artist_field, albums_field, year_field, song_field = tuple(line.strip('\n').split('\t'))
            year_field = int(year_field)
            print(artist_field, albums_field, year_field, song_field)
if __name__ == '__main__':
    load_data
